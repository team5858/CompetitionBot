// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.CompetitionBot.subsystems;

import org.usfirst.frc5858.CompetitionBot.RobotMap;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Power_Cube_Cannon extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final VictorSPX left_Manipulator_1 = RobotMap.power_Cube_CannonLeft_Manipulator_1;
    private final VictorSPX left_Manipulator_2 = RobotMap.power_Cube_CannonLeft_Manipulator_2;
    private final VictorSPX right_Manipulator_1 = RobotMap.power_Cube_CannonRight_Manipulator_1;
    private final VictorSPX right_Manipulator_2 = RobotMap.power_Cube_CannonRight_Manipulator_2;
    private final TalonSRX shoulder = RobotMap.power_Cube_Shoulder;
    //private final TalonSRX right_Shoulder = RobotMap.power_Cube_CannonRight_Shoulder;
    private final Potentiometer pot = RobotMap.pot;
    private final LEDDriver ledDriver = RobotMap.ledDriver;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        left_Manipulator_1.set(ControlMode.PercentOutput, 0.0);
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	SmartDashboard.putNumber("Shoulder Position", RobotMap.drivetrainLeft_Speed_Controller1.getSelectedSensorPosition(0));
    }
    
    public void pushOut() {
    	// This is necessary to run Robot.power_Cube_Cannon.pullIn();    	
    	left_Manipulator_1.set(ControlMode.PercentOutput, 1.0);
    	left_Manipulator_2.set(ControlMode.PercentOutput, 1.0);
    	right_Manipulator_1.set(ControlMode.PercentOutput, -1.0);
    	right_Manipulator_2.set(ControlMode.PercentOutput, -1.0);
    	//ledDriver.sendCommand(LEDDriver.Commands.PushOut);
    	
    }
    public void pullIn() {
    	//This is necessary to run Robot.power_Cube_Cannon.pushOut();
    	left_Manipulator_1.set(ControlMode.PercentOutput, -0.5);
    	left_Manipulator_2.set(ControlMode.PercentOutput, -0.5);
    	right_Manipulator_1.set(ControlMode.PercentOutput, 0.5);
    	right_Manipulator_2.set(ControlMode.PercentOutput, 0.5);
    	//ledDriver.sendCommand(LEDDriver.Commands.PullIn);
    }
    public void wheelsStop() {
    	//This is necessary to run Robot.power_Cube_Cannon.wheelsStop();
    	left_Manipulator_1.set(ControlMode.PercentOutput, 0.0);
    	left_Manipulator_2.set(ControlMode.PercentOutput, 0.0);
    	right_Manipulator_1.set(ControlMode.PercentOutput, 0.0);
    	right_Manipulator_2.set(ControlMode.PercentOutput, 0.0);
    	//ledDriver.sendCommand(LEDDriver.Commands.PushPullStop);
    }
    public void armUp() {
    	shoulder.set(ControlMode.PercentOutput, -0.75);
    	//ledDriver.sendCommand(LEDDriver.Commands.ArmUp);
    }
    
    public void armDown() {
    	shoulder.set(ControlMode.PercentOutput, 0.25);
    	//ledDriver.sendCommand(LEDDriver.Commands.ArmDown);
    }
    
    public void armStop() {
    	shoulder.set(ControlMode.PercentOutput, 0.0);
    	//ledDriver.sendCommand(LEDDriver.Commands.ArmStop);
    }
    
    public double potentiometer() {
    	double degrees = pot.get();
    	return degrees;
    }
}

