// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.CompetitionBot.subsystems;

import java.text.DecimalFormat;
import java.text.NumberFormat;

import org.usfirst.frc5858.CompetitionBot.RobotMap;
import org.usfirst.frc5858.CompetitionBot.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.sensors.PigeonIMU;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {

	public final TalonSRX left_Speed_Controller = RobotMap.drivetrainLeft_Speed_Controller1;
    public final TalonSRX right_Speed_Controller = RobotMap.drivetrainRight_Speed_Controller1;
    public final DifferentialDrive robot_Drive_rd = RobotMap.drivetrainRobot_Drive_rd;
    
    public final AnalogInput ultrasonic = RobotMap.ultrasonic;
    public final Ultrasonic digitalsonic = RobotMap.digitalsonic;
    public final PigeonIMU pigeon = RobotMap.pigeonIMU;
    
    @Override
    public void initDefaultCommand() {
    	setDefaultCommand(new JoystickDrive());
    }
    
    @Override
    public void periodic()
    {
    	
    }

    /*
    @Override
    public void periodic() {
        // Put code here to be run every loop
    	SmartDashboard.putNumber("Encoder Velocity", RobotMap.drivetrainLeft_Speed_Controller1.getSelectedSensorVelocity(0));
    	SmartDashboard.putNumber("Encoder Position", RobotMap.drivetrainLeft_Speed_Controller1.getSelectedSensorPosition(0));
        
    }*/

    public void RunTalon()
    {
    	left_Speed_Controller.set(ControlMode.PercentOutput, 0.1);
    }
    
    public void StopTalon()
    {
    	left_Speed_Controller.set(ControlMode.PercentOutput, 0.0);
    }
    
    public void SetPower(double power)
    {
    	left_Speed_Controller.set(ControlMode.PercentOutput, power);
    }
    
    public void runTalonVelocity(double velocity)
    {
    	left_Speed_Controller.set(ControlMode.Velocity, velocity);
    }
    
    public void runTalonPosition(double distance/*ft*/)
    {
    	final double SCALE_FACTOR = 4096;
    	
    	left_Speed_Controller.set(ControlMode.Position, distance * SCALE_FACTOR);
    }
    
    public double getUltraRange() {
    	double d = ultrasonic.getVoltage() / 0.0098;
    	NumberFormat formatter = new DecimalFormat("#0.00");
    	String decimal = formatter.format(d);
    	SmartDashboard.putString("DB/String 1", "Range: " +  decimal);
    	return d;
    }
    
    public double getDigitalRange() {
    	double d = digitalsonic.getRangeInches();
    	System.out.println("d " +d);
    	return d;
    }
    
    public double getGyroscope() {
    	double[] ypr_deg = null;
		pigeon.getYawPitchRoll(ypr_deg);
		return ypr_deg[0];
    }

	public double getAngle() {
		// TODO Auto-generated method stub
		return 0;
	}
    
    
}


